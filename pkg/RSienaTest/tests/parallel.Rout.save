
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RSienaTest)
> 
> 
> ##test3
> mynet1 <- sienaDependent(array(c(tmp3, tmp4),dim=c(32, 32, 2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(findiff=TRUE, fn = simstats0c, projname='test3',
+                        cond=FALSE, nsub=2, n3=50, seed=3)
> print('test3')
[1] "test3"
> ans<- siena07(mymodel, data=mydata, effects=myeff,
+      batch=TRUE, parallelTesting=TRUE, silent=TRUE)
> #,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0186  ( 0.5581   )    0.0134   
  2. eval outdegree (density)         -1.1374  ( 0.2723   )    0.1044   
  3. eval reciprocity                  1.7459  ( 0.2854   )   -0.1847   

Overall maximum convergence ratio:    0.3838 


Total of 407 iteration steps.

> ##test4
> mymodel$projname <- 'test4'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> print('test4')
[1] "test4"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.1399  ( 0.5436   )             
  1. eval outdegree (density) -1.1246  ( 0.3169   )   0.2203    
  2. eval reciprocity          1.7460  ( 0.4466   )   0.0080    

Overall maximum convergence ratio:    0.2341 


Total of 380 iteration steps.

> ##test5
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test5', nsub=2, n3=50,
+                        cond=FALSE, seed=5)
> print('test5')
[1] "test5"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0451  ( 0.5078   )    0.0103   
  2. eval outdegree (density)         -1.1448  ( 0.1690   )   -0.2193   
  3. eval reciprocity                  1.7883  ( 0.3820   )   -0.0597   

Overall maximum convergence ratio:    0.2334 


Total of 588 iteration steps.

> ##test6
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test6', nsub=2, n3=50,
+                        cond=FALSE, doubleAveraging=0,seed=5)
> print('test6')
[1] "test6"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0451  ( 0.5078   )    0.0103   
  2. eval outdegree (density)         -1.1448  ( 0.1690   )   -0.2193   
  3. eval reciprocity                  1.7883  ( 0.3820   )   -0.0597   

Overall maximum convergence ratio:    0.2334 


Total of 588 iteration steps.

> ##test7
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test7', nsub=2, n3=50,
+                        cond=FALSE,  diagonalize=0.5, seed=5)
> print('test7')
[1] "test7"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0258  ( 0.5063   )   -0.1656   
  2. eval outdegree (density)         -1.1558  ( 0.1821   )    0.0801   
  3. eval reciprocity                  1.8464  ( 0.3633   )    0.2701   

Overall maximum convergence ratio:    0.3630 


Total of 545 iteration steps.

> ##test8
> mymodel<- model.create(fn = simstats0c, projname='test8', nsub=2, n3=50,
+                        cond=TRUE, condvarno=1, seed=5)
> print('test8')
[1] "test8"
> ans <- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.0447  ( 0.4873   )             
  1. eval outdegree (density) -1.1448  ( 0.2355   )   0.0924    
  2. eval reciprocity          1.7887  ( 0.4195   )   0.0437    

Overall maximum convergence ratio:    0.0924 


Total of 495 iteration steps.

> ##test9
> 
> mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaDependent(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, linear, initialValue=0.34699930338, name="mynet2")
  effectName                   include fix   test  initialValue parm
1 mynet2 linear shape TRUE    FALSE FALSE      0.347   0   
> ##myeff$initialValue[98] <- 0.34699930338 ## siena3 starting values differ
> ##test10
> print('test10')
[1] "test10"
> mymodel$projname <- 'test10'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                                  Estimate   Standard   Convergence 
                                                               Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter cond. variable period 1  5.5929  ( 0.7753   )             
  0.2      Rate parameter cond. variable period 2  4.5232  ( 0.6646   )             

Other parameters: 
Network Dynamics 
  1.  eval outdegree (density)                    -2.3838  ( 0.1024   )   -0.0123   
  2.  eval reciprocity                             2.8551  ( 0.2210   )    0.0034   

Behavior Dynamics
  3.  rate rate mynet2 (period 1)                  1.1727  ( 0.2596   )   -0.2215   
  4.  rate rate mynet2 (period 2)                  1.6369  ( 0.4436   )   -0.1427   
  5.  eval mynet2 linear shape                     0.3702  ( 0.1744   )   -0.2015   
  6.  eval mynet2 quadratic shape                 -0.2082  ( 0.1238   )   -0.0034   

Overall maximum convergence ratio:    0.2949 


Total of 612 iteration steps.

> ##test12
> print('test12')
[1] "test12"
> use<- 1:30
> mynet1 <- sienaDependent(array(c(s501[use,], s502[use,], s503[use,]),
+                          dim=c(length(use), 50,3)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(50,'receivers')
> senders <- sienaNodeSet(30,'Senders')
> mydata <- sienaDataCreate(mynet1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- includeEffects(myeff, inPop)
  effectName            include fix   test  initialValue parm
1 indegree - popularity TRUE    FALSE FALSE          0   0   
> ans <- siena07(sienaModelCreate(n3=50, nsub=2,
+                seed=1, projname="test12"),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  4.2425  ( 0.6159   )             
  0.2      Rate parameter period 2  3.5658  ( 0.6180   )             

Other parameters: 
  1.  eval outdegree (density)     -1.8491  ( 0.1944   )   -0.0905   
  2.  eval indegree - popularity    0.0872  ( 0.0644   )   -0.1330   

Overall maximum convergence ratio:    0.1372 


Total of 508 iteration steps.

> tt <- sienaTimeTest(ans)
> tt
Joint significance test of time heterogeneity:
chi-squared =   0.67, d.f. = 2, p= 0.7155, 
where H0: The following parameters are zero:
 (1) (*)Dummy2:outdegree (density)
 (2) (*)Dummy2:indegree - popularity
> ##test13
> print('test13')
[1] "test13"
> net <- sienaDependent(array(c(tmp3, tmp4), dim=c(32, 32, 2)))
> dataset <- sienaDataCreate(net)
> eff <- getEffects(dataset)
> algo <- sienaAlgorithmCreate(nsub=2, n3=50, dolby=FALSE, seed=15)
> eff <- includeEffects(eff, density)
  effectName          include fix   test  initialValue parm
1 outdegree (density) TRUE    FALSE FALSE   -0.56039   0   
> eff <- includeEffects(eff, density, type='gmm')
  For estimation by the Generalized Method of Moments
  Effects

	 Statistics
  effectName          include type
1 outdegree (density) TRUE    gmm 
> eff <- includeEffects(eff, recip)
  effectName  include fix   test  initialValue parm
1 reciprocity TRUE    FALSE FALSE          0   0   
> (eff <- includeEffects(eff, recip, realrecip, persistrecip, type='gmm'))
  For estimation by the Generalized Method of Moments
  Effects

	 Statistics
  effectName        include type
1 reciprocity       TRUE    gmm 
2 persistent recip. TRUE    gmm 
3 real recip.       TRUE    gmm 
  For estimation by the Generalized Method of Moments
  Effects
  effectName               include fix   test  initialValue parm type
1 basic rate parameter net TRUE    FALSE FALSE    4.80941   0    rate
2 outdegree (density)      TRUE    FALSE FALSE   -0.56039   0    eval
3 reciprocity              TRUE    FALSE FALSE    0.00000   0    eval

	 Statistics
  effectName          include type
1 outdegree (density) TRUE    gmm 
2 reciprocity         TRUE    gmm 
3 persistent recip.   TRUE    gmm 
4 real recip.         TRUE    gmm 
> (ans <- sienacpp(algo, data=dataset, effects=eff))
Estimated by Generalized Method of Moments

Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       2.9009  ( 0.4890   )             
  1. eval outdegree (density) -1.1160  ( 0.1866   )   0.6470    
  2. eval reciprocity          1.9615  ( 0.3929   )   1.1065    

Overall maximum convergence ratio:    1.2607 


Total of  iteration steps.

> 
> proc.time()
   user  system elapsed 
  12.83    0.37   13.29 
