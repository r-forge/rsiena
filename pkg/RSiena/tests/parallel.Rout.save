
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RSienaTest)
> 
> 
> ##test3
> mynet1 <- sienaDependent(array(c(tmp3, tmp4),dim=c(32, 32, 2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(findiff=TRUE, fn = simstats0c, projname='test3',
+                        cond=FALSE, nsub=2, n3=50, seed=3)
> print('test3')
[1] "test3"
> ans<- siena07(mymodel, data=mydata, effects=myeff,
+      batch=TRUE, parallelTesting=TRUE, silent=TRUE)
> #,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0410  ( 0.5011   )    0.0922   
  2. eval outdegree (density)         -1.1448  ( 0.1459   )   -0.1884   
  3. eval reciprocity                  1.7264  ( 0.2028   )   -0.3503   

Overall maximum convergence ratio:    0.3582 


Total of 427 iteration steps.

> ##test4
> mymodel$projname <- 'test4'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> print('test4')
[1] "test4"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.0413  ( 0.4653   )             
  1. eval outdegree (density) -1.1180  ( 0.2905   )   0.3542    
  2. eval reciprocity          1.7762  ( 0.6137   )   0.3635    

Overall maximum convergence ratio:    0.4148 


Total of 382 iteration steps.

> ##test5
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test5', nsub=2, n3=50,
+                        cond=FALSE, seed=5)
> print('test5')
[1] "test5"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0243  ( 0.5458   )   -0.1228   
  2. eval outdegree (density)         -1.1365  ( 0.2544   )   -0.0164   
  3. eval reciprocity                  1.7417  ( 0.4957   )   -0.0716   

Overall maximum convergence ratio:    0.1500 


Total of 388 iteration steps.

> ##test6
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test6', nsub=2, n3=50,
+                        cond=FALSE, doubleAveraging=0,seed=5)
> print('test6')
[1] "test6"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  2.9998  ( 0.4495   )   -0.0315   
  2. eval outdegree (density)         -1.1342  ( 0.2135   )    0.0114   
  3. eval reciprocity                  1.7923  ( 0.4203   )    0.1191   

Overall maximum convergence ratio:    0.1482 


Total of 388 iteration steps.

> ##test7
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test7', nsub=2, n3=50,
+                        cond=FALSE,  diagonalize=0.5, seed=5)
> print('test7')
[1] "test7"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0031  ( 0.4631   )   -0.1367   
  2. eval outdegree (density)         -1.1287  ( 0.2086   )    0.0523   
  3. eval reciprocity                  1.8048  ( 0.4106   )    0.0898   

Overall maximum convergence ratio:    0.1868 


Total of 388 iteration steps.

> ##test8
> mymodel<- model.create(fn = simstats0c, projname='test8', nsub=2, n3=50,
+                        cond=TRUE, condvarno=1, seed=5)
> print('test8')
[1] "test8"
> ans <- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.0745  ( 0.5053   )             
  1. eval outdegree (density) -1.1450  ( 0.1686   )   0.1251    
  2. eval reciprocity          1.8290  ( 0.3904   )   0.0760    

Overall maximum convergence ratio:    0.1251 


Total of 398 iteration steps.

> ##test9
> 
> mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaDependent(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, linear, initialValue=0.34699930338, name="mynet2")
  effectName                   include fix   test  initialValue parm
1 behavior mynet2 linear shape TRUE    FALSE FALSE      0.347   0   
> ##myeff$initialValue[98] <- 0.34699930338 ## siena3 starting values differ
> ##test10
> print('test10')
[1] "test10"
> mymodel$projname <- 'test10'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                                  Estimate   Standard   Convergence 
                                                               Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter cond. variable period 1  5.7721  ( 0.9175   )             
  0.2      Rate parameter cond. variable period 2  4.5689  ( 0.8082   )             

Other parameters: 
Network Dynamics 
  1.  eval outdegree (density)                    -2.3548  ( 0.1411   )   -0.3546   
  2.  eval reciprocity                             2.8052  ( 0.2966   )   -0.4360   

Behavior Dynamics
  3.  rate rate mynet2 (period 1)                  1.1871  ( 0.3170   )    0.1309   
  4.  rate rate mynet2 (period 2)                  1.6950  ( 0.7495   )    0.2130   
  5.  eval behavior mynet2 linear shape            0.3717  ( 0.2445   )    0.1079   
  6.  eval behavior mynet2 quadratic shape        -0.2070  ( 0.1233   )    0.2108   

Overall maximum convergence ratio:    0.5444 


Total of 414 iteration steps.

> ##test12
> print('test12')
[1] "test12"
> use<- 1:30
> mynet1 <- sienaDependent(array(c(s501[use,], s502[use,], s503[use,]),
+                          dim=c(length(use), 50,3)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(50,'receivers')
> senders <- sienaNodeSet(30,'Senders')
> mydata <- sienaDataCreate(mynet1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- includeEffects(myeff, inPop)
  effectName            include fix   test  initialValue parm
1 indegree - popularity TRUE    FALSE FALSE          0   0   
> ans <- siena07(sienaModelCreate(n3=50, nsub=2,
+                seed=1, projname="test12"),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  4.3110  ( 0.5970   )             
  0.2      Rate parameter period 2  3.5516  ( 0.6044   )             

Other parameters: 
  1.  eval outdegree (density)     -1.8187  ( 0.1730   )   -0.0081   
  2.  eval indegree - popularity    0.0745  ( 0.0581   )   -0.1020   

Overall maximum convergence ratio:    0.1998 


Total of 325 iteration steps.

> tt <- sienaTimeTest(ans)
> tt
Joint significance test of time heterogeneity:
chi-squared =   0.81, d.f. = 2, p= 0.6654, 
where H0: The following parameters are zero:
 (1) (*)Dummy2:outdegree (density)
 (2) (*)Dummy2:indegree - popularity
> 
> proc.time()
   user  system elapsed 
   8.20    0.43    8.72 
